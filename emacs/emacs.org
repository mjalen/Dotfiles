Emacs ORG Configuration 
* General

#+begin_src emacs-lisp
   (setq inhibit-startup-screen t)
   (menu-bar-mode 0)
   (tool-bar-mode 0)
   (toggle-scroll-bar 0)

   (global-hl-line-mode +1)
   (line-number-mode +1)
   (global-display-line-numbers-mode 1)
   (column-number-mode t)
   (size-indication-mode t)   
   ; (fset 'yes-or-no-p 'y-or-n-p)

   ; Font
   (set-frame-font "Fira Code Light:size=12")
   ; (setq default-frame-alist nil)
   (use-package all-the-icons
     :if (display-graphic-p))

   (use-package doom-modeline
      :ensure t
      :hook (after-init . doom-modeline-mode))

  (use-package doom-themes
      :ensure t
      :config
      (setq doome-themes-enable-bold t
        doom-themes-enable-italic t)
      (doom-themes-visual-bell-config)
      (doom-themes-org-config)
      ;(load-theme 'doom-nord-aurora t)
   )

  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
       (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (treemacs-resize-icons 17))

  (defun no-lines ()
    (display-line-numbers-mode -1))

  (add-hook 'treemacs-mode 'no-lines)

  (use-package treemacs-evil
    :after (treemacs evil)
    :ensure t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (load-theme 'doom-wilmersdorf t)

  #+end_src

* LSP Mode

#+begin_src emacs-lisp
  (use-package lsp-mode
  :commands lsp
  :ensure t
  :custom
  (lsp-rust-analyzer-server-display-inlay-hints t)
  (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
  ;; (lsp-rust-analyzer-display-chaining-hints t)
  (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
  (lsp-rust-analyzer-display-closure-return-type-hints t)
  (lsp-rust-analyzer-display-parameter-hints nil)
  (lsp-rust-analyzer-display-reborrow-hints t)
  (lsp-rust-analyzer-cargo-watch-command "clippy")
  (lsp-lens-enable t)
  ; (lsp-eldoc-render-all t)
  ;; (lsp-idle-delay 0.6)
  (lsp-eldoc-enable-hover t)
  (lsp-signature-auto-activate t)
  (lsp-signature-render-documentation t)
  (lsp-completion-show-detail t)
  (lsp-completion-show-kind t)
  :config
  (add-hook 'lsp-mode-hook 'lsp-ui-mode))

  (use-package lsp-ui
    :ensure
    :commands lsp-ui-mode
    :custom
    (lsp-ui-peek-always-show t)
    (lsp-ui-sideline-show-hover t)
    (lsp-ui-doc-show-with-mouse t)
    (lsp-ui-doc-enable t))

  (use-package company
  :ensure
  :custom
  (company-idle-delay 0.5)
  :bind
  (:map company-active-map
        ("C-n". company-select-next)
        ("C-p". company-select-previous)
        ("M-<". company-select-first)
        ("M->". company-select-last)))

  ;; ; vu
  (use-package vue-mode
  :mode "\\.vue\\'"
  :config
  (add-hook 'vue-mode-hook #'lsp))
#+end_src

* Evil

#+begin_src emacs-lisp
    (setq org-src-tab-acts-natively t)
    (use-package evil
      :config
      (evil-mode t))
#+end_src

* Helm

#+begin_src emacs-lisp
  (use-package helm
  :config
  (setq helm-echo-input-in-header-line t)
  (setq helm-split-window-inside-p t)
  (setq helm-to-line-cycle-in-source t)
  (setq helm-buffers-fuzzy-matching t)
  (setq	helm-recentf-fuzzy-match    t)
  (helm-autoresize-mode 1)
  (helm-mode 1))

  (use-package swiper-helm
  :config nil)
#+end_src

* Org
#+begin_src emacs-lisp
  (use-package org :straight (:type built-in))

  (use-package websocket
    :after org-roam)
#+end_src

* Projectile

#+begin_src emacs-lisp
    (use-package projectile
      :custom
      (projectile-mode +1)
      (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+end_src

* Keybinds (General)

#+begin_src emacs-lisp
  (defun yt/reload-dot-emacs ()
    "Save the .emacs buffer if needed, then reload .emacs."
    (interactive)

    (let ((dot-emacs "~/.emacs.d/init.el"))
      (and (get-file-buffer dot-emacs)
	   (save-buffer (get-file-buffer dot-emacs)))
      (load-file dot-emacs))
    (message "Re-initialized!"))

  (setq confirm-kill-emacs 'y-or-n-p)

  (use-package general
    :straight t
    :config
    (general-auto-unbind-keys t)
    (general-define-key
	"<escape>" 'keyboard-escape-quit
	"M-x" 'helm-M-x
	"M-t" 'treemacs
	"<end>" 'end-of-line
	"<home>" 'beginning-of-line
	"C-<tab>" 'helm-buffers-list
	"C-x C-f" 'helm-find-files
	"C-x C-e" 'yt/reload-dot-emacs
	"C-s" 'swiper-helm

	"M-p" 'projectile-command-map
	"C-c p" 'projectile-command-map
	)

    (general-def helm-map
	"<tab>" 'helm-execute-persistent-action))

  (general-evil-setup)
  (general-nmap
     "g t" 'centaur-tabs-forward
     "g T" 'centaur-tabs-backward
     ";" 'evil-ex
     ":" 'evil-repeat-find-char)

  (general-imap
      "<escape>" 'evil-normal-state)

  ; Which-key for keybinding help
  (use-package which-key)
  (which-key-mode)

 #+end_src

* Rust

#+begin_src emacs-lisp
  ; Have Emacs recognize cargo.
  ;; (defun set-exec-path-from-shell-PATH ()
  ;;   (interactive)
  ;;   (let ((path-from-shell (replace-regexp-in-string
  ;;                           "$PS1" "" (shell-command-to-string
  ;;                                      "$SHELL --login -c 'echo $PATH'"
  ;;                                      ))))
  ;;     (setenv "PATH" path-from-shell)
  ;;     (setq exec-path (split-string path-from-shell path-separator))))

  ;; (set-exec-path-from-shell-PATH)

  (use-package exec-path-from-shell)

  (when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))

  ; configure rust-mode
  (use-package rustic
    :ensure
    :bind (:map rustic-mode-map
              ("M-j" . lsp-ui-imenu)
              ("M-?" . lsp-find-references)
              ("C-c C-c l" . flycheck-list-errors)
              ("C-c C-c a" . lsp-execute-code-action)
              ("C-c C-c r" . lsp-rename)
              ("C-c C-c q" . lsp-workspace-restart)
              ("C-c C-c Q" . lsp-workspace-shutdown)
              ("C-c C-c s" . lsp-rust-analyzer-status))
    :config
    (setq rustic-format-on-save t)
    (setq lsp-rust-analyzer-server-display-inlay-hints t)
    (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

  (defun rk/rustic-mode-hook ()
    (when buffer-file-name
      (setq-local buffer-save-without-query t))
    (add-hook 'before-save-hook 'lsp-format-buffer nil t))

  ; inline errors
  (use-package flycheck :ensure)

#+end_src

* GLSL

#+begin_src emacs-lisp
  (use-package glsl-mode)
  (add-to-list 'auto-mode-alist '("\\.frag\\'" . glsl-mode))
  (add-to-list 'auto-mode-alist '("\\.vert\\'" . glsl-mode))
#+end_src

* Making Emacs Look Nice

#+begin_src emacs-lisp
    ; Mini-Buffer
    (use-package mini-frame)

    ; Helm in new frame by cursor
    ;; (setq helm-display-function 'helm-display-buffer-in-own-frame
    ;;       helm-display-buffer-reuse-frame t
    ;;       helm-use-undecorated-frame-option t)

    ; Auto refresh files
    (global-auto-revert-mode t)

    ; Auto Indent
    ; (setq auto-indent-on-visit-file t)
    (use-package auto-indent-mode)

    ; Show Tabs
    (setq custom-tab-width 4)
    ; (setq-default electric-indent-inhibit t)
    (setq-default indent-tabs-mode t)
    (setq-default tab-width 4)
    (setq indent-line-function 'insert-tab)
    ;; (setq backward-delete-char-untabify-method 'hungry) ; backspace will properly remove tabs
    ;; (setq-default evil-shift-width custom-tab-width)

  ; Smart Tabs
  (use-package smart-tabs-mode
    :config
    (smart-tabs-insinuate 'c 'javascript))

    ;; (setq-default python-indent-offset custom-tab-width)
    ;; (setq-default js-indent-level custom-tab-width)

    ;; ; Add tabs as a pipe character
    ;; (setq whitespace-style '(face tabs tab-mark trailing))
    ;; (custom-set-faces
    ;;  '(whitespace-tab ((t (:foreground "#636363")))))
    ;; (setq whitespace-display-mappings
    ;;       '((tab-mark 9 [124 9] [92 9])))
    ;; (global-whitespace-mode)

    ;; ; Titlebar
  ;(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  ; (add-to-list 'default-frame-alist '(ns-appearance . dark))
  ;(setq ns-use-proxy-icon  nil)

    ;(setq frame-title-format nil)
#+end_src
